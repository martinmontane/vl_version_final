datos <- as.data.table(lapply(datos, function(x) ifelse(is.na(x), "", x)))
# for (i in 1:nrow(datos)) {
#   datos$Iniciativas_COVID[i] <- paste(ifelse(!is.na(datos$Iniciativa_COVID_AcompañamientoPsic[i]), datos$Iniciativa_COVID_AcompañamientoPsic[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_AsesoramientoLegal[i]), datos$Iniciativa_COVID_AsesoramientoLegal[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_Cultura[i]), datos$Iniciativa_COVID_Cultura[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_Educacion[i]), datos$Iniciativa_COVID_Educacion[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_Deportes[i]), datos$Iniciativa_COVID_Deportes[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_MaterialSanitario[i]), datos$Iniciativa_COVID_MaterialSanitario[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_AlimentosComedores[i]), datos$Iniciativa_COVID_AlimentosComedores[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_ApoyoAdultosMay[i]), datos$Iniciativa_COVID_ApoyoAdultosMay[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_ApoyoSituCalle[i]), datos$Iniciativa_COVID_ApoyoSituCalle[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_ApoyoInfanciaRiesgo[i]), datos$Iniciativa_COVID_ApoyoInfanciaRiesgo[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_ApoyoColectVulne[i]), datos$Iniciativa_COVID_ApoyoColectVulne[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_ViolGenero[i]), datos$Iniciativa_COVID_ViolGenero[i],''),
#                                       sep = ';')
#
#
#   #datos$Iniciativas_COVID[i] <- str_remove_all(datos$Iniciativas_COVID[i], '\\; ; ' )
#   #datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '\\s{2,}', '; ' )
#   datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '\\;{2,}', ';' )
#   datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '(?<=[:alpha:]);(?=[:alpha:])', '; ' )
#   datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '(?<![:alpha:]);', '' )
#   datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '; (?![:alpha:])', '' )
#   datos$Iniciativas_COVID[i] <- str_trim(datos$Iniciativas_COVID[i])
#   datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], ';(?!\\s)', '' )
#   #datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '\\[:alpha:];[:alpha:]', '' )
#   #datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '\\;;', '' )
#
#   datos$Pagina[i] <- tolower(datos$Pagina[i])
#   datos$Pagina[i] <- ifelse(str_detect(datos$Pagina[i],'www.'), datos$Pagina[i], '' )
#   datos$Pagina[i] <- ifelse(is.na(datos$Pagina[i]), '', datos$Pagina[i])
#   datos$Pagina[i] <- str_remove_all(datos$Pagina[i], 'https://')
# }
# Definición de íconos.
# awesomeIconList es una función que nos permite unir a las categorias de las variables
# con un ícono particular de las librerias de font awesome o ion icons.
# Por default, los Nombre_OSCs de la lista hacen referencia a las
# categorías de la variable Categoria
# VLIcons <- awesomeIconList(
#   Discapacidad = makeAwesomeIcon(icon = 'fa-wheelchair',library = 'fa',markerColor = 'white',iconColor = 'black'),
#   Salud = makeAwesomeIcon(icon = 'ios-medkit',library = 'ion',markerColor = 'white',iconColor = 'black'),
#   `Participacion Social` = makeAwesomeIcon(icon = 'ios-people',library = 'ion',markerColor = 'white',iconColor = 'black'),
#   `Culto y Colectividades` = makeAwesomeIcon(icon = 'fa-globe',library = 'fa',markerColor = 'white',iconColor = 'black'),
#   `Deportes y Recreacion` = makeAwesomeIcon(icon = 'futbol-o',library = 'fa',markerColor = 'white',iconColor = 'black'),
#   `Cultura y Educacion` = makeAwesomeIcon(icon = 'fa-graduation-cap',library = 'fa',markerColor = 'white',iconColor = 'black'),
#   `Adultos Mayores` = makeAwesomeIcon(icon = 'fa-blind',library = 'fa',markerColor = 'white',iconColor = 'black')
# )
# Convierte al Data Table a un objeto sf.
# Asume que las columnas correspondientes a las coordenadas son lon y lat
# en el sistema de coordenada de referencia WGS84
datos <- st_as_sf(datos[!is.na(lat)],coords = c('lon','lat'))
# Crea los popups que se van a ver en el mapa.
# Se basan en una función "createPopups", disponible en el archivo auxiliares.R
# Algunos parámetros, tales como Nombre_OSC, tematica, contactoTel y contactoMail
# solo piden el Nombre_OSC de la columna. Esto es así porque son campos que
# en general no necesitan formateo especial para aparecer en el popup.
# direccion, captionWhatsapp y descripcion deben agregarse
# vectores con algún tipo de formato para luego mostrarse correctamente en la aplicacion
# finalmente, addWhatsapp es un parámetro que puede tomar valor
# TRUE o FALSE y que nos pregunta si queremos agregar la funcionalidad
# de conectividad para compartir una organización por whatsapp. En caso
# de poner TRUE, debemos enviar un texto al parámetro captionWhatsapp
# para que aparezca alguna información específica y genérica al
# compartir cualquiera de las organizaciones.
datos$popup <- createPopups(data = datos,
nombre = 'Nombre_OSC',
tematica = 'categorias',
direccion = paste(datos$Direccion,', ',datos$Barrio,', Vicente Lopez', sep=''),
contactoTel = "Tel",
contactoMail = "Mail",
addWhatsapp = TRUE,
captionWhatsapp = "Lo encontré en el Mapa de Organizaciones Sociales de Vicente López",
descripcion = "Actividades_organizacion",
contactoWeb = "Web",
descripcionCOVID = "Desc_actividades_durante_covid_19")
# Las aplicaciones de shiny tienen dos partes. UI define
# cómo se verá la página: qué elementos tendrá, qué estilo, entre otros
# parámetros.
ui <- dashboardPage(
dashboardHeader(title = paste0("Mapa interactivo de OSC (",nrow(datos),')')),
dashboardSidebar(disable=TRUE),
dashboardBody(
shinyjs::useShinyjs(),
includeCSS(path = "Styles/styles2.css"),
includeCSS(path ="https://fonts.googleapis.com/css?family=Montserrat:400"),
shiny::includeScript("gomap.js"),
useSweetAlert(),
fluidRow(
column(3,box("",width='100%',
autocomplete_input(id = "SeleccionEntidad",
label =  "Buscá por el nombre",
options =  unique(datos$Nombre_OSC),
max_options = 1000),
pickerInput(
inputId = "FiltroBarrios",
label = "Filtrar por barrios",
choices = (unique(datos$Barrio)),
selected = (unique(datos$Barrio)),
options = list(
size = 5,
`actions-box` = TRUE,
`select-all-text` = 'Todos',
`none-selected-text` = 'Seleccioná al menos uno',
`deselect-all-text` = 'Ninguno'),
multiple=TRUE
),
pickerInput(
inputId = "FiltroTematico",
label = "Filtrar por temas",
choices = unique(unlist(datos$categorias)),
multiple = TRUE,
selected = unique(unlist(datos$categorias)),
options = list(
size = 5,
`actions-box` = TRUE,
`select-all-text` = 'Todos',
`none-selected-text` = 'Seleccioná al menos uno',
`deselect-all-text` = 'Ninguno')
),
checkboxInput(
inputId = "ActivasCovid",
label = 'Organizaciones con iniciativas en COVID'),
HTML("<center>"),
actionBttn(
inputId = "NearMe",
label = "Cerca mío",
style = "bordered",
color = "success",
icon = icon(lib = "glyphicon",name = "record")
),
HTML("</center>")
)),
column(9,leafletOutput("map",height = '100vh')))
)
)
# La segunda parte del código, el server, define
# cómo reaccionar ante eventos del usuario
server <- function(input, output, session) {
inputs_change<-reactive({
list(input$FiltroBarrios,input$FiltroTematico, input$ActivasCovid)
}) %>% debounce(2000)
output$map <- renderLeaflet({
if(length(inputs_change()[[1]])==0 | length(inputs_change()[[2]])==0) {
leaflet(data = datos) %>%
addProviderTiles("CartoDB.Positron",
options = providerTileOptions(minZoom = 10, maxZoom = 20)) %>%
setMaxBounds( lng1 = -(58.5503+0.1)
, lat1 = -(34.55554+0.1)
, lng2 = -(58.46877-0.1)
, lat2 = -(34.49391-0.1 )) %>%
setView(lng = -58.5,lat = -34.52,zoom = 13)
} else {
if(inputs_change()[[3]] == FALSE) {
leaflet(data = datos[datos$Barrio %in% inputs_change()[[1]] &
sapply(datos$categorias, function(x) any(x %in% inputs_change()[[2]])) ,]) %>%
addProviderTiles("CartoDB.Positron",
options = providerTileOptions(minZoom = 10, maxZoom = 20)) %>%
addAwesomeMarkers(clusterOptions = markerClusterOptions(),
popup = ~popup,label = ~Nombre_OSC) %>%
# popup = ~popup,icon = ~VLIcons[Categoria],label = ~Nombre_OSC) %>%
setMaxBounds( lng1 = -(58.5503+0.1)
, lat1 = -(34.55554+0.1)
, lng2 = -(58.46877-0.1)
, lat2 = -(34.49391-0.1 ))
} else {
leaflet(data = datos[datos$Barrio %in% inputs_change()[[1]] &
sapply(datos$categorias, function(x) any(x %in% inputs_change()[[2]])) &
datos$Hubo_actividades_durante_covid %in% inputs_change()[[3]] ,]) %>%
addProviderTiles("CartoDB.Positron",
options = providerTileOptions(minZoom = 10, maxZoom = 20)) %>%
addAwesomeMarkers(clusterOptions = markerClusterOptions(),
popup = ~popup,label = ~Nombre_OSC) %>%
# popup = ~popup,icon = ~VLIcons[Categoria],label = ~Nombre_OSC) %>%
setMaxBounds( lng1 = -(58.5503+0.1)
, lat1 = -(34.55554+0.1)
, lng2 = -(58.46877-0.1)
, lat2 = -(34.49391-0.1 ))
}
}
})
observeEvent(input$SeleccionEntidad,{
if(input$SeleccionEntidad=="") {
} else {
lng <- (datos[datos$Nombre_OSC %in% input$SeleccionEntidad,] %>%
st_geometry() %>% unlist(.))[1]
lat <-  (datos[datos$Nombre_OSC %in% input$SeleccionEntidad,] %>%
st_geometry() %>% unlist(.))[2]
popupUnico <- datos[datos$Nombre_OSC %in% input$SeleccionEntidad,'popup'] %>% unlist() %>% .[1] %>% unname()
leafletProxy("map") %>%
setView(lng = lng,lat = lat,zoom = 16) %>%
addPopups(lng = lng, lat = lat,popup=popupUnico) %>%
setMaxBounds( lng1 = -(58.5503+0.1)
, lat1 = -(34.55554+0.1)
, lng2 = -(58.46877-0.1)
, lat2 = -(34.49391-0.1 ))
}
})
observeEvent(input$NearMe,{
if(!is.null(input$geolocation)){
leafletProxy("map") %>%
setView(lng = input$long,
lat = input$lat,
zoom = 16)  %>%
setMaxBounds( lng1 = -(58.5503+0.1)
, lat1 = -(34.55554+0.1)
, lng2 = -(58.46877-0.1)
, lat2 = -(34.49391-0.1 ))
} else {
sendSweetAlert(
session = session,
title = "Error",
text = "Para usar esta función tenés que habilitar la opción de compartir tu ubicación",
type = "error"
)
}
})
}
# Llamada final
shinyApp(ui = ui, server = server)
###########################
## @auth: Martin Montane ##
###########################
library(leaflet)
library(shiny)
library(sf)
library(shinydashboard)
library(shinyWidgets)
library(data.table)
library(shinyjs)
library(stringr)
library(dqshiny)
library(httpuv)
# Carga de librerias
# librerias <- c('leaflet','shiny','sf','shinydashboard','shinyWidgets',
#                'data.table','gsubfn','dqshiny','shinyjs','httpuv','stringr')
# lapply(librerias, require, character.only=TRUE)
# Carga de funciones auxiliares
source('auxiliares.R')
# Carga de datos.
# El código espera que sea un dataset con las siguientes variables:
# Nombre_OSC OSC: el Nombre_OSC con el que se presenta a la organización
# Direccion: dirección (única) donde se encuentra la organización
# Barrio: unidad geográfica mínima donde se ubica la organización,
# podría ser barrio o culquier otra medida (por ejemplo, comuna).
# Tel. de la Entidad: numero de teléfono para ser contactado
# categorias: Categoría según se organizan las instituciones. Versión 2019
# ContactoMail: mail de contacto
# Descricipcion: Breve párrafo sobre las actividades que realiza
# lon: longitud de la coordenada donde se ubica (WGS84)
# lat: latitud de la coordenada donde se ubica (WGS84)
# ACA UNO LOS DATOS VIEJOS CON GEO Y LOS NUEVOS QUE TIENEN MAS INFO PERO NO GEO
# datos <- fread('http://vicentelopez.cloudapi.junar.com/api/v2/datastreams/ENTID/data.csv/?auth_key=Zemmwb1TiGf1MD9q9O0Y4aBEugpJxecUKGZbfnzL',
#              encoding = 'UTF-8')
# datos <- readxl::read_excel('planilla_final_2020_10_27_raw.xlsx')
# load("datos2020_10_20.RData")
datos <- fread('http://vicentelopez.opendata.junar.com/rest/datastreams/278863/data.csv',
encoding = 'UTF-8')
# Pequeño data wrangling que hay que hacer para leer correctamente los datos
# de longitud y latitud de VL
datos[,lon:=as.numeric(paste(substr(gsub(lon, pattern = '\\.',replacement= ''),1,3),
substr(gsub(lon, pattern = '\\.',replacement= ''),4,nchar(gsub(lon, pattern = '\\.',replacement= ''))),
sep='.'))]
datos[,lat:=as.numeric(paste(substr(gsub(lat, pattern = '\\.',replacement= ''),1,3),
substr(gsub(lat, pattern = '\\.',replacement= ''),4,nchar(gsub(lat, pattern = '\\.',replacement= ''))),
sep='.'))]
colnames(datos) <- c("Nombre_OSC", "Direccion","Barrio","Presidente_o_responsable",
"Tel", "Mail", "Web", "Categoria","lon","lat", "Actividades_organizacion",
"Hubo_actividades_durante_covid", "Desc_actividades_durante_covid_19")
# Corrección en la columna de categorías
datos$categorias <- str_squish(datos$categorias)
datos$categorias <- str_split(string = datos$Categoria,pattern = ",")
datos[,categorias:=lapply(categorias,function(x) str_squish(x))]
datos[,categorias:=lapply(categorias,function(x) str_to_title(x))]
datos[,categorias:=lapply(categorias,function(x) gsub(pattern = " Y ",replacement = " y ",x = x))]
datos[,categorias:=lapply(categorias,function(x) ifelse(x %in% c("",NA),"Otros",x))]
categoriasUnicas <- unique(unlist(datos$categorias))
# Corrección en otras variables
datos[, Hubo_actividades_durante_covid:=ifelse(Hubo_actividades_durante_covid %in% "SI",TRUE,FALSE)]
datos[, Desc_actividades_durante_covid_19:=ifelse(is.na(Desc_actividades_durante_covid_19),
"No declaró actividades durante la pandemia de COVID-19",
Desc_actividades_durante_covid_19)]
datos[, Web:=ifelse(!substr(Web,1,4) %in% "http" & !is.na(Web) & !Web %in% "",
paste("http://",Web,sep=""),Web)]
datos[, Web:=ifelse(is.na(Web), "",Web)]
datos[, Tel:=ifelse(is.na(Tel), "",Tel)]
# datos2 <- readRDS('datos.rds') %>% select(c(6:115))
# datos <- cbind(datos, datos2)
# La columna "Actividades durante el COVID toma valores SI/NO/ vacío, acá se
# convierte a una variable booleana
# datos[["Hubo_actividades_durante_covid"]] <- ifelse(datos[["Hubo_actividades_durante_covid"]] %in% "SI",TRUE,FALSE)
# Si existen oboservaciones que están vacías, pero son textos, hay que
# convertirlo
# Data Wrangling específico para contactos
datos <- as.data.table(lapply(datos, function(x) ifelse(is.na(x), "", x)))
# for (i in 1:nrow(datos)) {
#   datos$Iniciativas_COVID[i] <- paste(ifelse(!is.na(datos$Iniciativa_COVID_AcompañamientoPsic[i]), datos$Iniciativa_COVID_AcompañamientoPsic[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_AsesoramientoLegal[i]), datos$Iniciativa_COVID_AsesoramientoLegal[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_Cultura[i]), datos$Iniciativa_COVID_Cultura[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_Educacion[i]), datos$Iniciativa_COVID_Educacion[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_Deportes[i]), datos$Iniciativa_COVID_Deportes[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_MaterialSanitario[i]), datos$Iniciativa_COVID_MaterialSanitario[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_AlimentosComedores[i]), datos$Iniciativa_COVID_AlimentosComedores[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_ApoyoAdultosMay[i]), datos$Iniciativa_COVID_ApoyoAdultosMay[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_ApoyoSituCalle[i]), datos$Iniciativa_COVID_ApoyoSituCalle[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_ApoyoInfanciaRiesgo[i]), datos$Iniciativa_COVID_ApoyoInfanciaRiesgo[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_ApoyoColectVulne[i]), datos$Iniciativa_COVID_ApoyoColectVulne[i],''),
#                                       ifelse(!is.na(datos$Iniciativa_COVID_ViolGenero[i]), datos$Iniciativa_COVID_ViolGenero[i],''),
#                                       sep = ';')
#
#
#   #datos$Iniciativas_COVID[i] <- str_remove_all(datos$Iniciativas_COVID[i], '\\; ; ' )
#   #datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '\\s{2,}', '; ' )
#   datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '\\;{2,}', ';' )
#   datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '(?<=[:alpha:]);(?=[:alpha:])', '; ' )
#   datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '(?<![:alpha:]);', '' )
#   datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '; (?![:alpha:])', '' )
#   datos$Iniciativas_COVID[i] <- str_trim(datos$Iniciativas_COVID[i])
#   datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], ';(?!\\s)', '' )
#   #datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '\\[:alpha:];[:alpha:]', '' )
#   #datos$Iniciativas_COVID[i] <- str_replace_all(datos$Iniciativas_COVID[i], '\\;;', '' )
#
#   datos$Pagina[i] <- tolower(datos$Pagina[i])
#   datos$Pagina[i] <- ifelse(str_detect(datos$Pagina[i],'www.'), datos$Pagina[i], '' )
#   datos$Pagina[i] <- ifelse(is.na(datos$Pagina[i]), '', datos$Pagina[i])
#   datos$Pagina[i] <- str_remove_all(datos$Pagina[i], 'https://')
# }
# Definición de íconos.
# awesomeIconList es una función que nos permite unir a las categorias de las variables
# con un ícono particular de las librerias de font awesome o ion icons.
# Por default, los Nombre_OSCs de la lista hacen referencia a las
# categorías de la variable Categoria
# VLIcons <- awesomeIconList(
#   Discapacidad = makeAwesomeIcon(icon = 'fa-wheelchair',library = 'fa',markerColor = 'white',iconColor = 'black'),
#   Salud = makeAwesomeIcon(icon = 'ios-medkit',library = 'ion',markerColor = 'white',iconColor = 'black'),
#   `Participacion Social` = makeAwesomeIcon(icon = 'ios-people',library = 'ion',markerColor = 'white',iconColor = 'black'),
#   `Culto y Colectividades` = makeAwesomeIcon(icon = 'fa-globe',library = 'fa',markerColor = 'white',iconColor = 'black'),
#   `Deportes y Recreacion` = makeAwesomeIcon(icon = 'futbol-o',library = 'fa',markerColor = 'white',iconColor = 'black'),
#   `Cultura y Educacion` = makeAwesomeIcon(icon = 'fa-graduation-cap',library = 'fa',markerColor = 'white',iconColor = 'black'),
#   `Adultos Mayores` = makeAwesomeIcon(icon = 'fa-blind',library = 'fa',markerColor = 'white',iconColor = 'black')
# )
# Convierte al Data Table a un objeto sf.
# Asume que las columnas correspondientes a las coordenadas son lon y lat
# en el sistema de coordenada de referencia WGS84
datos <- st_as_sf(datos[!is.na(lat)],coords = c('lon','lat'))
# Crea los popups que se van a ver en el mapa.
# Se basan en una función "createPopups", disponible en el archivo auxiliares.R
# Algunos parámetros, tales como Nombre_OSC, tematica, contactoTel y contactoMail
# solo piden el Nombre_OSC de la columna. Esto es así porque son campos que
# en general no necesitan formateo especial para aparecer en el popup.
# direccion, captionWhatsapp y descripcion deben agregarse
# vectores con algún tipo de formato para luego mostrarse correctamente en la aplicacion
# finalmente, addWhatsapp es un parámetro que puede tomar valor
# TRUE o FALSE y que nos pregunta si queremos agregar la funcionalidad
# de conectividad para compartir una organización por whatsapp. En caso
# de poner TRUE, debemos enviar un texto al parámetro captionWhatsapp
# para que aparezca alguna información específica y genérica al
# compartir cualquiera de las organizaciones.
datos$popup <- createPopups(data = datos,
nombre = 'Nombre_OSC',
tematica = 'categorias',
direccion = paste(datos$Direccion,', ',datos$Barrio,', Vicente Lopez', sep=''),
contactoTel = "Tel",
contactoMail = "Mail",
addWhatsapp = TRUE,
captionWhatsapp = "Lo encontré en el Mapa de Organizaciones Sociales de Vicente López",
descripcion = "Actividades_organizacion",
contactoWeb = "Web",
descripcionCOVID = "Desc_actividades_durante_covid_19")
# Las aplicaciones de shiny tienen dos partes. UI define
# cómo se verá la página: qué elementos tendrá, qué estilo, entre otros
# parámetros.
ui <- dashboardPage(
dashboardHeader(title = paste0("Mapa interactivo de OSC (",nrow(datos),')')),
dashboardSidebar(disable=TRUE),
dashboardBody(
shinyjs::useShinyjs(),
includeCSS(path = "Styles/styles2.css"),
includeCSS(path ="https://fonts.googleapis.com/css?family=Montserrat:400"),
shiny::includeScript("gomap.js"),
useSweetAlert(),
fluidRow(
column(3,box("",width='100%',
autocomplete_input(id = "SeleccionEntidad",
label =  "Buscá por el nombre",
options =  unique(datos$Nombre_OSC),
max_options = 1000),
pickerInput(
inputId = "FiltroBarrios",
label = "Filtrar por barrios",
choices = (unique(datos$Barrio)),
selected = (unique(datos$Barrio)),
options = list(
size = 5,
`actions-box` = TRUE,
`select-all-text` = 'Todos',
`none-selected-text` = 'Seleccioná al menos uno',
`deselect-all-text` = 'Ninguno'),
multiple=TRUE
),
pickerInput(
inputId = "FiltroTematico",
label = "Filtrar por temas",
choices = unique(unlist(datos$categorias)),
multiple = TRUE,
selected = unique(unlist(datos$categorias)),
options = list(
size = 5,
`actions-box` = TRUE,
`select-all-text` = 'Todos',
`none-selected-text` = 'Seleccioná al menos uno',
`deselect-all-text` = 'Ninguno')
),
checkboxInput(
inputId = "ActivasCovid",
label = 'Organizaciones con iniciativas en COVID'),
HTML("<center>"),
actionBttn(
inputId = "NearMe",
label = "Cerca mío",
style = "bordered",
color = "success",
icon = icon(lib = "glyphicon",name = "record")
),
HTML("</center>")
)),
column(9,leafletOutput("map",height = '100vh')))
)
)
# La segunda parte del código, el server, define
# cómo reaccionar ante eventos del usuario
server <- function(input, output, session) {
inputs_change<-reactive({
list(input$FiltroBarrios,input$FiltroTematico, input$ActivasCovid)
}) %>% debounce(2000)
output$map <- renderLeaflet({
if(length(inputs_change()[[1]])==0 | length(inputs_change()[[2]])==0) {
leaflet(data = datos) %>%
addProviderTiles("CartoDB.Positron",
options = providerTileOptions(minZoom = 10, maxZoom = 20)) %>%
setMaxBounds( lng1 = -(58.5503+0.1)
, lat1 = -(34.55554+0.1)
, lng2 = -(58.46877-0.1)
, lat2 = -(34.49391-0.1 )) %>%
setView(lng = -58.5,lat = -34.52,zoom = 13)
} else {
if(inputs_change()[[3]] == FALSE) {
leaflet(data = datos[datos$Barrio %in% inputs_change()[[1]] &
sapply(datos$categorias, function(x) any(x %in% inputs_change()[[2]])) ,]) %>%
addProviderTiles("CartoDB.Positron",
options = providerTileOptions(minZoom = 10, maxZoom = 20)) %>%
addAwesomeMarkers(clusterOptions = markerClusterOptions(),
popup = ~popup,label = ~Nombre_OSC) %>%
# popup = ~popup,icon = ~VLIcons[Categoria],label = ~Nombre_OSC) %>%
setMaxBounds( lng1 = -(58.5503+0.1)
, lat1 = -(34.55554+0.1)
, lng2 = -(58.46877-0.1)
, lat2 = -(34.49391-0.1 ))
} else {
leaflet(data = datos[datos$Barrio %in% inputs_change()[[1]] &
sapply(datos$categorias, function(x) any(x %in% inputs_change()[[2]])) &
datos$Hubo_actividades_durante_covid %in% inputs_change()[[3]] ,]) %>%
addProviderTiles("CartoDB.Positron",
options = providerTileOptions(minZoom = 10, maxZoom = 20)) %>%
addAwesomeMarkers(clusterOptions = markerClusterOptions(),
popup = ~popup,label = ~Nombre_OSC) %>%
# popup = ~popup,icon = ~VLIcons[Categoria],label = ~Nombre_OSC) %>%
setMaxBounds( lng1 = -(58.5503+0.1)
, lat1 = -(34.55554+0.1)
, lng2 = -(58.46877-0.1)
, lat2 = -(34.49391-0.1 ))
}
}
})
observeEvent(input$SeleccionEntidad,{
if(input$SeleccionEntidad=="") {
} else {
lng <- (datos[datos$Nombre_OSC %in% input$SeleccionEntidad,] %>%
st_geometry() %>% unlist(.))[1]
lat <-  (datos[datos$Nombre_OSC %in% input$SeleccionEntidad,] %>%
st_geometry() %>% unlist(.))[2]
popupUnico <- datos[datos$Nombre_OSC %in% input$SeleccionEntidad,'popup'] %>% unlist() %>% .[1] %>% unname()
leafletProxy("map") %>%
setView(lng = lng,lat = lat,zoom = 16) %>%
addPopups(lng = lng, lat = lat,popup=popupUnico) %>%
setMaxBounds( lng1 = -(58.5503+0.1)
, lat1 = -(34.55554+0.1)
, lng2 = -(58.46877-0.1)
, lat2 = -(34.49391-0.1 ))
}
})
observeEvent(input$NearMe,{
if(!is.null(input$geolocation)){
leafletProxy("map") %>%
setView(lng = input$long,
lat = input$lat,
zoom = 16)  %>%
setMaxBounds( lng1 = -(58.5503+0.1)
, lat1 = -(34.55554+0.1)
, lng2 = -(58.46877-0.1)
, lat2 = -(34.49391-0.1 ))
} else {
sendSweetAlert(
session = session,
title = "Error",
text = "Para usar esta función tenés que habilitar la opción de compartir tu ubicación",
type = "error"
)
}
})
}
# Llamada final
shinyApp(ui = ui, server = server)
